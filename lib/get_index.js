// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var GetIndex, a_json_parse, chain, clean_ring, constants, iced, make_esc, unix_time, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  _ref = require('iced-utils').util, chain = _ref.chain, unix_time = _ref.unix_time, a_json_parse = _ref.a_json_parse;

  constants = require('./constants').constants;

  clean_ring = require('./util').clean_ring;

  exports.GetIndex = GetIndex = (function() {
    function GetIndex(config) {
      this.config = config;
    }

    GetIndex.prototype.fetch_index = function(cb) {
      var err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
            funcname: "GetIndex.fetch_index"
          });
          _this.config.request("/" + (_this.config.key_version()) + "/index.asc", __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return __slot_1._signed_index = arguments[2];
              };
            })(_this),
            lineno: 16
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GetIndex.prototype.decrypt_and_verify = function(cb) {
      var a, b, err, esc, now, raw, t, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "GetIndex::decrypt_and_verify");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
            funcname: "GetIndex.decrypt_and_verify"
          });
          _this.config.make_oneshot_ring('index', esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1._ring = arguments[0];
              };
            })(_this),
            lineno: 23
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
              funcname: "GetIndex.decrypt_and_verify"
            });
            _this._ring.verify_sig({
              sig: _this._signed_index
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return raw = arguments[0];
                };
              })(),
              lineno: 24
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
                funcname: "GetIndex.decrypt_and_verify"
              });
              a_json_parse(raw, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1._index = arguments[0];
                  };
                })(_this),
                lineno: 25
              })));
              __iced_deferrals._fulfill();
            })(function() {
              var _ref1, _ref2;
              now = unix_time();
              err = (t = _this._index.timestamp) == null ? new Error("Bad index; no timestamp") : (a = now - t) > (b = constants.index_timeout) ? new Error("Index timed out: " + a + " > " + b) : ((_ref1 = _this._index.keys) != null ? _ref1.latest : void 0) == null ? new Error("missing required field: keys.latest") : ((_ref2 = _this._index["package"]) != null ? _ref2.latest : void 0) == null ? new Error("missing required field: package.latest") : null;
              return cb(err);
            });
          });
        };
      })(this));
    };

    GetIndex.prototype.index = function() {
      return this._index;
    };

    GetIndex.prototype.cleanup = function(cb) {
      return clean_ring(this.ring, cb);
    };

    GetIndex.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cb = chain(cb, this.clean.bind(this));
      esc = make_esc(cb, "GetIndex::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
            funcname: "GetIndex.run"
          });
          _this.fetch_index(esc(__iced_deferrals.defer({
            lineno: 49
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/get_index.iced",
              funcname: "GetIndex.run"
            });
            _this.decrypt_and_verify(esc(__iced_deferrals.defer({
              lineno: 50
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.config.set_index(_this._index);
            return cb(null);
          });
        };
      })(this));
    };

    return GetIndex;

  })();

}).call(this);
