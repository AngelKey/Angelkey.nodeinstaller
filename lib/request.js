// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var ProgressBar, Request, cacert, fullname, https, iced, parse, request, single, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  https = require('https');

  parse = require('url').parse;

  ProgressBar = require('progress');

  fullname = require('./package').fullname;

  cacert = "-----BEGIN CERTIFICATE-----\nMIIGmzCCBIOgAwIBAgIJAPzhpcIBaOeNMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYD\nVQQGEwJVUzELMAkGA1UECBMCTlkxETAPBgNVBAcTCE5ldyBZb3JrMRQwEgYDVQQK\nEwtLZXliYXNlIExMQzEXMBUGA1UECxMOQ2VydCBBdXRob3JpdHkxEzARBgNVBAMT\nCmtleWJhc2UuaW8xHDAaBgkqhkiG9w0BCQEWDWNhQGtleWJhc2UuaW8wHhcNMTQw\nMTAyMTY0MjMzWhcNMjMxMjMxMTY0MjMzWjCBjzELMAkGA1UEBhMCVVMxCzAJBgNV\nBAgTAk5ZMREwDwYDVQQHEwhOZXcgWW9yazEUMBIGA1UEChMLS2V5YmFzZSBMTEMx\nFzAVBgNVBAsTDkNlcnQgQXV0aG9yaXR5MRMwEQYDVQQDEwprZXliYXNlLmlvMRww\nGgYJKoZIhvcNAQkBFg1jYUBrZXliYXNlLmlvMIICIjANBgkqhkiG9w0BAQEFAAOC\nAg8AMIICCgKCAgEA3sLA6ZG8uOvmlFvFLVIOURmcQrZyMFKbVu9/TeDiemls3w3/\nJzVTduD+7KiUi9R7QcCW/V1ZpReTfunm7rfACiJ1fpIkjSQrgsvKDLghIzxIS5FM\nI8utet5p6QtuJhaAwmmXn8xX05FvqWNbrcXRdpL4goFdigPsFK2xhTUiWatLMste\noShI7+zmrgkx75LeLMD0bL2uOf87JjOzbY8x2sUIZLGwPoATyG8WS38ey6KkJxRj\nAhG3p+OTYEjYSrsAtQA6ImbeDpfSHKOB8HF3nVp//Eb4HEiEsWwBRbQXvAWh3DYL\nGukFW0wiO0HVCoWY+bHL/Mqa0NdRGOlLsbL4Z4pLrhqKgSDU8umX9YuNRRaB0P5n\nTkzyU6axHqzq990Gep/I62bjsBdYYp+DjSPK43mXRrfWJl2NTcl8xKAyfsOW+9hQ\n9vwK0tpSicNxfYuUZs0BhfjSZ/Tc6Z1ERdgUYRiXTtohl+SRA2IgZMloHCllVMNj\nEjXhguvHgLAOrcuyhVBupiUQGUHQvkMsr1Uz8VPNDFOJedwucRU2AaR881bknnSb\nds9+zNLsvUFV+BK7Qdnt/WkFpYL78rGwY47msi9Ooddx6fPyeg3qkJGM6cwn/boy\nw9lQeleYDq8kyJdixIAxtAskNzRPJ4nDu2izTfByQoM8epwAWboc/gNFObMCAwEA\nAaOB9zCB9DAdBgNVHQ4EFgQURqpATOw1gVVrzlqqFKbkfaKXvwowgcQGA1UdIwSB\nvDCBuYAURqpATOw1gVVrzlqqFKbkfaKXvwqhgZWkgZIwgY8xCzAJBgNVBAYTAlVT\nMQswCQYDVQQIEwJOWTERMA8GA1UEBxMITmV3IFlvcmsxFDASBgNVBAoTC0tleWJh\nc2UgTExDMRcwFQYDVQQLEw5DZXJ0IEF1dGhvcml0eTETMBEGA1UEAxMKa2V5YmFz\nZS5pbzEcMBoGCSqGSIb3DQEJARYNY2FAa2V5YmFzZS5pb4IJAPzhpcIBaOeNMAwG\nA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggIBAA3Z5FIhulYghMuHdcHYTYWc\n7xT5WD4hXQ0WALZs4p5Y+b2Af54o6v1wUE1Au97FORq5CsFXX/kGl/JzzTimeucn\nYJwGuXMpilrlHCBAL5/lSQjA7qbYIolQ3SB9ON+LYuF1jKB9k8SqNp7qzucxT3tO\nb8ZMDEPNsseC7NE2uwNtcW3yrTh6WZnSqg/jwswiWjHYDdG7U8FjMYlRol3wPux2\nPizGbSgiR+ztI2OthxtxNWMrT9XKxNQTpcxOXnLuhiSwqH8PoY17ecP8VPpaa0K6\nzym0zSkbroqydazaxcXRk3eSlc02Ktk7HzRzuqQQXhRMkxVnHbFHgGsz03L533pm\nmlIEgBMggZkHwNvs1LR7f3v2McdKulDH7Mv8yyfguuQ5Jxxt7RJhUuqSudbEhoaM\n6jAJwBkMFxsV2YnyFEd3eZ/qBYPf7TYHhyzmHW6WkSypGqSnXd4gYpJ8o7LxSf4F\ninLjxRD+H9Xn1UVXWLM0gaBB7zZcXd2zjMpRsWgezf5IR5vyakJsc7fxzgor3Qeq\nRi6LvdEkhhFVl5rHMQBwNOPngySrq8cs/ikTLTfQVTYXXA4Ba1YyiMOlfaR1LhKw\nIf1AkUV0tfCTNRZ01EotKSK77+o+k214n+BAu+7mO+9B5Kb7lMFQcuWCHXKYB2Md\ncT7Yh09F0QpFUd0ymEfv\n-----END CERTIFICATE-----";

  Request = (function() {
    function Request(_arg) {
      var progress, uri, url;
      url = _arg.url, uri = _arg.uri, this.headers = _arg.headers, progress = _arg.progress;
      url = url || uri;
      this._res = null;
      this._data = [];
      this._err = null;
      this.uri = this.url = typeof url === 'string' ? parse(url) : url;
      this._bar = null;
      this._opts = {
        progress: progress
      };
    }

    Request.prototype.run = function(cb) {
      this._done_cb = cb;
      return this._launch();
    };

    Request.prototype._make_opts = function() {
      var opts;
      opts = {
        host: this.url.hostname,
        port: this.url.port || 443,
        path: this.url.path,
        method: 'GET',
        ca: [cacert],
        headers: this.headers,
        rejectUnauthorized: true
      };
      opts.agent = new https.Agent(opts);
      return opts;
    };

    Request.prototype._launch = function() {
      var opts, req;
      opts = this._make_opts();
      req = https.request(opts, (function(_this) {
        return function(res) {
          var l, _ref;
          if ((_this._opts.progress != null) && ((l = (_ref = res.headers) != null ? _ref["content-length"] : void 0) != null) && !(isNaN(l = parseInt(l, 10))) && l > _this._opts.progress) {
            _this._bar = new ProgressBar("Download " + _this.url.path + " [:bar] :percent :etas (" + l + " bytes total)", {
              complete: "=",
              incomplete: ' ',
              width: 50,
              total: l
            });
          }
          _this._res = res;
          res.request = _this;
          res.on('data', function(d) {
            var _ref1;
            _this._data.push(d);
            return (_ref1 = _this._bar) != null ? _ref1.tick(d.length) : void 0;
          });
          return res.on('end', function() {
            return _this._finish();
          });
        };
      })(this));
      req.end();
      return req.on('error', (function(_this) {
        return function(e) {
          _this._err = e;
          return _this._finish();
        };
      })(this));
    };

    Request.prototype._finish = function() {
      var cb;
      cb = this._done_cb;
      this._done_cb = null;
      return cb(this._err, this._res, Buffer.concat(this._data));
    };

    return Request;

  })();

  single = function(opts, cb) {
    return (new Request(opts)).run(cb);
  };

  module.exports = request = function(url, cb) {
    var body, err, headers, i, opts, res, ___iced_passed_deferral, __iced_deferrals, __iced_k, _begin, _end, _positive;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    headers = {
      "X-Keybase-Installer": fullname()
    };
    opts = {
      url: url,
      headers: headers,
      encoding: null,
      progress: 50000,
      maxRedirects: 10
    };
    err = new Error("Too many redirects");
    res = body = null;
    (function(_this) {
      return (function(__iced_k) {
        var _i, _results, _while;
        i = 0;
        _begin = 0;
        _end = lim;
        _positive = _end > _begin;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              if (_positive) {
                i += 1;
              } else {
                i -= 1;
              }
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!!((_positive === true && i >= lim) || (_positive === false && i <= lim))) {
            return _break();
          } else {

            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/request.iced"
              });
              single(opts, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    res = arguments[1];
                    return body = arguments[2];
                  };
                })(),
                lineno: 124
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                var _ref;
                if (!((_ref = res.statusCode) === 301 || _ref === 302)) {
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  (function(__iced_k) {
                    var _ref1;
                    if ((url = (_ref1 = res.headers) != null ? _ref1.location : void 0) == null) {
                      err = new Error("Can't find a location in header for redirect");
                      (function(__iced_k) {
_break()
                      })(__iced_k);
                    } else {
                      return __iced_k(opts.url = url);
                    }
                  })(__iced_k);
                }
              })(_next);
            });
          }
        };
        _while(__iced_k);
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, res, body);
      };
    })(this));
  };

}).call(this);
