// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var BaseCommand, BufferOutStream, FileBundle, GPG, Installer, SetupKeyRunner, constants, fs, fullname, iced, id64, key, make_esc, npm, path, request, rng, signer_id_email, tmpdir, to_base64x, url_join, __iced_k, __iced_k_noop, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseCommand = require('./base').BaseCommand;

  _ref = require('gpg-wrapper'), BufferOutStream = _ref.BufferOutStream, GPG = _ref.GPG;

  make_esc = require('iced-error').make_esc;

  _ref1 = require('./key'), signer_id_email = _ref1.signer_id_email, key = _ref1.key, id64 = _ref1.id64;

  request = require('./request');

  fullname = require('./package').fullname;

  constants = require('./constants').constants;

  tmpdir = require('os').tmpdir;

  rng = require('crypto').rng;

  npm = require('./npm').npm;

  path = require('path');

  fs = require('fs');

  SetupKeyRunner = require('./setup_key').SetupKeyRunner;

  url_join = function() {
    var arg, args, parts, _i, _len, _ref2;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    parts = [args[0]];
    _ref2 = args.slice(1);
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      arg = _ref2[_i];
      if (parts.slice(-1)[0].slice(-1)[0] !== '/') {
        parts.push('/');
      }
      parts.push(arg);
    }
    return parts.join('');
  };

  to_base64x = function(x) {
    return x.toString('base64').replace(/\+/g, '_').replace(/\//g, '-').replace(/\=/g, '');
  };

  FileBundle = (function() {
    function FileBundle(uri, body) {
      this.uri = uri;
      this.body = body;
    }

    FileBundle.prototype.filename = function() {
      return path.basename(this.uri.path);
    };

    FileBundle.prototype.fullpath = function() {
      return this._fullpath;
    };

    FileBundle.prototype.write = function(dir, encoding, cb) {
      var err, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      p = this._fullpath = path.join(dir, this.filename());
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "FileBundle.write"
          });
          fs.writeFile(p, _this.body, {
            mode: 0x100,
            encoding: encoding
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 37
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return FileBundle;

  })();

  exports.Installer = Installer = (function(_super) {
    __extends(Installer, _super);

    function Installer(argv) {
      this.headers = {
        "X-Keybase-Installer": fullname()
      };
      Installer.__super__.constructor.call(this, argv);
    }

    Installer.prototype.make_tempdir = function(cb) {
      var err, r, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      r = to_base64x(rng(12));
      this.tmpdir = path.join(tmpdir(), "keybase_install_" + r);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.make_tempdir"
          });
          fs.mkdir(_this.tmpdir, 0x1c0, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 53
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log("Made temporary directory: " + _this.tmpdir);
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.write_files = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::write_files");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.write_files"
          });
          _this.make_tempdir(esc(__iced_deferrals.defer({
            lineno: 61
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.write_files"
            });
            _this["package"].write(_this.tmpdir, 'binary', esc(__iced_deferrals.defer({
              lineno: 62
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.write_files"
              });
              _this.signature.write(_this.tmpdir, 'utf8', esc(__iced_deferrals.defer({
                lineno: 63
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    Installer.prototype.import_key = function(cb) {
      var args, esc, keybuf, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::import_key");
      keybuf = new Buffer(key, 'utf8');
      args = ["--import"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.import_key"
          });
          _this.gpg.run({
            args: args,
            stdin: keybuf,
            quiet: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 72
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.import_key"
            });
            _this.gpg.assert_exactly_one(id64, esc(__iced_deferrals.defer({
              lineno: 73
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Installer.prototype.request = function(url, cb) {
      var body, err, opts, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts = {
        url: url,
        headers: this.headers,
        encoding: null
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.request"
          });
          request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 80
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, res, body);
        };
      })(this));
    };

    Installer.prototype.fetch_package = function(cb) {
      var body, err, file, prefix, res, sc, url, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      prefix = this.argv.get("url-prefix", "u") || constants.url_prefix;
      file = ((_ref2 = this.argv.get()) != null ? _ref2[0] : void 0) || "latest-stable";
      url = url_join(prefix, file);
      console.log("Fetching archive: " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.fetch_package"
          });
          _this.request(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 94
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err != null) {
            err = new Error("Error in fetch: " + err.message);
          } else if ((sc = res.statusCode) !== 200) {
            err = new Error("bad status code in fetch: " + sc);
          } else {
            _this["package"] = new FileBundle(res.request.uri, body);
          }
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.fetch_signature = function(cb) {
      var body, err, res, sc, url, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      url = this["package"].uri.format() + ".asc";
      console.log("Fetching signature: " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.fetch_signature"
          });
          _this.request(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 109
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err != null) {
            err = new Error("Error in fetch: " + err.message);
          } else if ((sc = res.statusCode) !== 200) {
            err = new Error("bad status code in fetch: " + sc);
          } else {
            _this.signature = new FileBundle(res.request.uri, body);
          }
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.verify_signature = function(cb) {
      var args, count_lines, data, err, find, out, stderr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      count_lines = function(lines, regex) {
        var line, n, _i, _len;
        n = 0;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          if (line.match(regex)) {
            n++;
          }
        }
        return n;
      };
      find = function(lines, regex, m1) {
        var line, m, _i, _len;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          if ((m = line.match(regex)) && (m[1] === m1)) {
            return true;
          }
        }
        return false;
      };
      args = ["--verify", "--keyid-format", "long", this.signature.fullpath(), this["package"].fullpath()];
      stderr = new BufferOutStream();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.verify_signature"
          });
          _this.gpg.run({
            args: args,
            stderr: stderr
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 136
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            data = stderr.data().toString('utf8').split("\n");
            if ((count_lines(data, /Signature made/) !== 1) || (count_lines(data, /using RSA key/) !== 1) || (count_lines(data, /Good signature from/) !== 1)) {
              err = new Error("Wrong number of signatures; expected exactly 1");
            } else if (!find(data, /using RSA key ([A-F0-9]{16})/, id64)) {
              err = new Error("Didn't get a signature with key ID " + id64);
            } else if (!find(data, /Good signature from.*<(\S+)>/, signer_id_email)) {
              err = new Error("Didn't get a signature from email=" + signer_id_email);
            }
          }
          (function(__iced_k) {
            if (err == null) {
              args = ["--list-packets"];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.verify_signature"
                });
                _this.gpg.run({
                  args: args,
                  stdin: _this.signature.body
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return out = arguments[1];
                    };
                  })(),
                  lineno: 149
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k((err == null) && !(find(out.toString('utf8').split("\n"), /:signature packet: algo 1, keyid ([A-F0-9]{16})/, id64)) ? err = new Error("Bad signature; didn't match key ID=" + id64) : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            console.log("Verified package with Keybase.io's code-signing key");
            return cb(err);
          });
        };
      })(this));
    };

    Installer.prototype.install_package = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("Running npm install " + (this["package"].filename()) + "; this may take a minute, please be patient");
      args = ["install", "-g", this["package"].fullpath()];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.install_package"
          });
          npm({
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 160
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.run_old_2 = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run_old_2"
          });
          _this.verify_signature(esc(__iced_deferrals.defer({
            lineno: 167
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run_old_2"
            });
            _this.install_package(esc(__iced_deferrals.defer({
              lineno: 168
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Installer.prototype.cleanup = function(cb) {
      var esc, f, files, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::cleanup");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.cleanup"
          });
          fs.readdir(_this.tmpdir, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return files = arguments[0];
              };
            })(),
            lineno: 175
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _len, _ref2, _results, _while;
            _ref2 = files;
            _len = _ref2.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                f = _ref2[_i];
                p = path.join(_this.tmpdir, f);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                    funcname: "Installer.cleanup"
                  });
                  fs.unlink(p, esc(__iced_deferrals.defer({
                    lineno: 178
                  })));
                  __iced_deferrals._fulfill();
                })(_next);
              }
            };
            _while(__iced_k);
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.cleanup"
              });
              fs.rmdir(_this.tmpdir, esc(__iced_deferrals.defer({
                lineno: 179
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    Installer.prototype.run = function(cb) {
      var e2, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run"
          });
          _this._run2(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 185
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!_this.argv.get("C", "skip-cleanup")) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run"
                });
                _this.cleanup(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return e2 = arguments[0];
                    };
                  })(),
                  lineno: 187
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(typeof e2 !== "undefined" && e2 !== null ? console.warn("In cleanup: " + e2) : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            if ((typeof err === "undefined" || err === null) && (_this["package"] != null)) {
              console.log("Succesful install: " + (_this["package"].filename()));
            }
            return cb(err);
          });
        };
      })(this));
    };

    Installer.prototype.setup_key = function(cb) {
      var err, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      sk = new SetupKeyRunner();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.setup_key"
          });
          sk.run(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 197
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Installer.prototype._run2 = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::_run2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer._run2"
          });
          _this.setup_key(esc(__iced_deferrals.defer({
            lineno: 204
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer._run2"
            });
            _this.get_index(esc(__iced_deferrals.defer({
              lineno: 205
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer._run2"
              });
              _this.upgrade_key(esc(__iced_deferrals.defer({
                lineno: 206
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer._run2"
                });
                _this.upgrade_software(esc(__iced_deferrals.defer({
                  lineno: 207
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    Installer.prototype.run_old = function(cb) {
      var err, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.gpg = new GPG;
      esc = make_esc(cb, "Installer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run_old"
          });
          _this.import_key(esc(__iced_deferrals.defer({
            lineno: 215
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run_old"
            });
            _this.fetch_package(esc(__iced_deferrals.defer({
              lineno: 216
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.run_old"
              });
              _this.fetch_signature(esc(__iced_deferrals.defer({
                lineno: 217
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run_old"
                });
                _this.write_files(esc(__iced_deferrals.defer({
                  lineno: 218
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                    funcname: "Installer.run_old"
                  });
                  _this.run2(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return err = arguments[0];
                      };
                    })(),
                    lineno: 219
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    return Installer;

  })(BaseCommand);

}).call(this);
