// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BaseCommand, GPG, GetIndex, Installer, KeySetup, KeyUpgrade, SoftwareUpgrade, chain, constants, fullname, iced, keyring, log, make_esc, npm, request, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseCommand = require('./base').BaseCommand;

  _ref = require('gpg-wrapper'), keyring = _ref.keyring, GPG = _ref.GPG;

  make_esc = require('iced-error').make_esc;

  request = require('./request');

  fullname = require('./package').fullname;

  constants = require('./constants').constants;

  KeySetup = require('./key_setup').KeySetup;

  KeyUpgrade = require('./key_upgrade').KeyUpgrade;

  GetIndex = require('./get_index').GetIndex;

  SoftwareUpgrade = require('./software_upgrade').SoftwareUpgrade;

  log = require('./log');

  npm = require('./npm');

  chain = require('iced-utils').util.chain;

  exports.Installer = Installer = (function(_super) {
    __extends(Installer, _super);

    function Installer(argv) {
      Installer.__super__.constructor.call(this, argv);
    }

    Installer.prototype.cleanup = function(cb) {
      var e2, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.cleanup"
          });
          _this.config.cleanup(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return e2 = arguments[0];
              };
            })(),
            lineno: 25
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof e2 !== "undefined" && e2 !== null) {
            log.error("In cleanup: " + e2);
          }
          if ((typeof err === "undefined" || err === null) && (_this["package"] != null)) {
            log.info("Succesful install: " + (_this["package"].filename()));
          }
          return cb();
        };
      })(this));
    };

    Installer.prototype.test_gpg = function(cb) {
      var c, err, gpg, lines, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gpg = new GPG({});
      log.debug("+ Installer::test_gpg");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.test_gpg"
          });
          gpg.test(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            lines = [];
            if ((c = _this.config.get_alt_cmd('gpg')) != null) {
              lines.push("The GPG command you specified `" + c + "` wasn't found; see this page for help installing `gpg`:");
            } else {
              lines.push("The command `gpg` wasn't found; you need to install it. See this page for more info:");
            }
            lines.push("\t   https://keybase.io/__/command_line/keybase#prerequisites");
            err = new Error(lines.join("\n"));
          }
          log.debug("- Installer::test_gpg -> " + (err != null ? 'FAILED' : 'OK'));
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.test_npm = function(cb) {
      var c, cmd, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cmd = this.config.get_cmd('npm');
      log.debug("+ Installer::test_npm");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.test_npm"
          });
          npm.check(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 59
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {

          } else if ((c = _this.config.get_alt_cmd('npm')) != null) {
            err = new Error("The npm command you specified `" + c + "` wasn't found");
          } else {
            err = new Error("Couldn't find an `npm` command in your path");
          }
          log.debug("- Installer::test_npm -> " + (err != null ? 'FAILED' : 'OK'));
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ Installer::run");
      cb = chain(cb, this.cleanup.bind(this));
      esc = make_esc(cb, "Installer::run");
      this.config.set_alt_cmds();
      npm.set_config(this.config);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run"
          });
          _this.test_gpg(esc(__iced_deferrals.defer({
            lineno: 76
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run"
            });
            _this.test_npm(esc(__iced_deferrals.defer({
              lineno: 77
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.run"
              });
              _this.config.make_tmpdir(esc(__iced_deferrals.defer({
                lineno: 78
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run"
                });
                _this.config.init_keyring(esc(__iced_deferrals.defer({
                  lineno: 79
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                    funcname: "Installer.run"
                  });
                  _this.key_setup(esc(__iced_deferrals.defer({
                    lineno: 80
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                      funcname: "Installer.run"
                    });
                    _this.get_index(esc(__iced_deferrals.defer({
                      lineno: 81
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                        funcname: "Installer.run"
                      });
                      _this.key_upgrade(esc(__iced_deferrals.defer({
                        lineno: 82
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                          funcname: "Installer.run"
                        });
                        _this.software_upgrade(esc(__iced_deferrals.defer({
                          lineno: 83
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        log.debug("- Installer::run");
                        return cb(null);
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Installer.prototype.key_setup = function(cb) {
      return (new KeySetup(this.config)).run(cb);
    };

    Installer.prototype.get_index = function(cb) {
      return (new GetIndex(this.config)).run(cb);
    };

    Installer.prototype.key_upgrade = function(cb) {
      return (new KeyUpgrade(this.config)).run(cb);
    };

    Installer.prototype.software_upgrade = function(cb) {
      return (new SoftwareUpgrade(this.config)).run(cb);
    };

    return Installer;

  })(BaseCommand);

}).call(this);
