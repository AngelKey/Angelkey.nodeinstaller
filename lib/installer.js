// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var BaseCommand, BufferOutStream, FileBundle, GPG, GetIndex, Installer, KeySetup, chain, constants, fs, fullname, iced, id64, key, keyring, log, make_esc, npm, path, request, signer_id_email, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseCommand = require('./base').BaseCommand;

  _ref = require('gpg-wrapper'), keyring = _ref.keyring, BufferOutStream = _ref.BufferOutStream, GPG = _ref.GPG;

  make_esc = require('iced-error').make_esc;

  _ref1 = require('./key'), signer_id_email = _ref1.signer_id_email, key = _ref1.key, id64 = _ref1.id64;

  request = require('./request');

  fullname = require('./package').fullname;

  constants = require('./constants').constants;

  npm = require('./npm').npm;

  path = require('path');

  fs = require('fs');

  KeySetup = require('./key_setup').KeySetup;

  GetIndex = require('./get_index').GetIndex;

  log = require('./log');

  chain = require('iced-utils').util.chain;

  FileBundle = (function() {
    function FileBundle(uri, body) {
      this.uri = uri;
      this.body = body;
    }

    FileBundle.prototype.filename = function() {
      return path.basename(this.uri.path);
    };

    FileBundle.prototype.fullpath = function() {
      return this._fullpath;
    };

    FileBundle.prototype.write = function(dir, encoding, cb) {
      var err, p, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      p = this._fullpath = path.join(dir, this.filename());
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "FileBundle.write"
          });
          fs.writeFile(p, _this.body, {
            mode: 0x100,
            encoding: encoding
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 25
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return FileBundle;

  })();

  exports.Installer = Installer = (function(_super) {
    __extends(Installer, _super);

    function Installer(argv) {
      Installer.__super__.constructor.call(this, argv);
    }

    Installer.prototype.write_files = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::write_files");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.write_files"
          });
          _this.make_tmpdir(esc(__iced_deferrals.defer({
            lineno: 39
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.write_files"
            });
            _this["package"].write(_this.tmpdir, 'binary', esc(__iced_deferrals.defer({
              lineno: 40
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.write_files"
              });
              _this.signature.write(_this.tmpdir, 'utf8', esc(__iced_deferrals.defer({
                lineno: 41
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    Installer.prototype.import_key = function(cb) {
      var args, esc, keybuf, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::import_key");
      keybuf = new Buffer(key, 'utf8');
      args = ["--import"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.import_key"
          });
          _this.gpg.run({
            args: args,
            stdin: keybuf,
            quiet: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 50
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.import_key"
            });
            _this.gpg.assert_exactly_one(id64, esc(__iced_deferrals.defer({
              lineno: 51
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Installer.prototype.request = function(url, cb) {
      var body, err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.request"
          });
          request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 57
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, res, body);
        };
      })(this));
    };

    Installer.prototype.fetch_package = function(cb) {
      var body, err, file, prefix, res, sc, url, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      prefix = this.argv.get("url-prefix", "u") || constants.url_prefix;
      file = ((_ref2 = this.argv.get()) != null ? _ref2[0] : void 0) || "latest-stable";
      url = url_join(prefix, file);
      console.log("Fetching archive: " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.fetch_package"
          });
          _this.request(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 71
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err != null) {
            err = new Error("Error in fetch: " + err.message);
          } else if ((sc = res.statusCode) !== 200) {
            err = new Error("bad status code in fetch: " + sc);
          } else {
            _this["package"] = new FileBundle(res.request.uri, body);
          }
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.fetch_signature = function(cb) {
      var body, err, res, sc, url, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      url = this["package"].uri.format() + ".asc";
      console.log("Fetching signature: " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.fetch_signature"
          });
          _this.request(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 86
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err != null) {
            err = new Error("Error in fetch: " + err.message);
          } else if ((sc = res.statusCode) !== 200) {
            err = new Error("bad status code in fetch: " + sc);
          } else {
            _this.signature = new FileBundle(res.request.uri, body);
          }
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.verify_signature = function(cb) {
      var args, count_lines, data, err, find, out, stderr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      count_lines = function(lines, regex) {
        var line, n, _i, _len;
        n = 0;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          if (line.match(regex)) {
            n++;
          }
        }
        return n;
      };
      find = function(lines, regex, m1) {
        var line, m, _i, _len;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          if ((m = line.match(regex)) && (m[1] === m1)) {
            return true;
          }
        }
        return false;
      };
      args = ["--verify", "--keyid-format", "long", this.signature.fullpath(), this["package"].fullpath()];
      stderr = new BufferOutStream();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.verify_signature"
          });
          _this.gpg.run({
            args: args,
            stderr: stderr
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 113
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            data = stderr.data().toString('utf8').split("\n");
            if ((count_lines(data, /Signature made/) !== 1) || (count_lines(data, /using RSA key/) !== 1) || (count_lines(data, /Good signature from/) !== 1)) {
              err = new Error("Wrong number of signatures; expected exactly 1");
            } else if (!find(data, /using RSA key ([A-F0-9]{16})/, id64)) {
              err = new Error("Didn't get a signature with key ID " + id64);
            } else if (!find(data, /Good signature from.*<(\S+)>/, signer_id_email)) {
              err = new Error("Didn't get a signature from email=" + signer_id_email);
            }
          }
          (function(__iced_k) {
            if (err == null) {
              args = ["--list-packets"];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.verify_signature"
                });
                _this.gpg.run({
                  args: args,
                  stdin: _this.signature.body
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return out = arguments[1];
                    };
                  })(),
                  lineno: 126
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k((err == null) && !(find(out.toString('utf8').split("\n"), /:signature packet: algo 1, keyid ([A-F0-9]{16})/, id64)) ? err = new Error("Bad signature; didn't match key ID=" + id64) : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            console.log("Verified package with Keybase.io's code-signing key");
            return cb(err);
          });
        };
      })(this));
    };

    Installer.prototype.install_package = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("Running npm install " + (this["package"].filename()) + "; this may take a minute, please be patient");
      args = ["install", "-g", this["package"].fullpath()];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.install_package"
          });
          npm({
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 137
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.run_old_2 = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run_old_2"
          });
          _this.verify_signature(esc(__iced_deferrals.defer({
            lineno: 144
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run_old_2"
            });
            _this.install_package(esc(__iced_deferrals.defer({
              lineno: 145
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Installer.prototype.cleanup = function(cb) {
      var e2, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.cleanup"
          });
          _this.config.cleanup(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return e2 = arguments[0];
              };
            })(),
            lineno: 151
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof e2 !== "undefined" && e2 !== null) {
            log.error("In cleanup: " + e2);
          }
          if ((typeof err === "undefined" || err === null) && (_this["package"] != null)) {
            log.info("Succesful install: " + (_this["package"].filename()));
          }
          return cb();
        };
      })(this));
    };

    Installer.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ Installer::run");
      cb = chain(cb, this.cleanup.bind(this));
      esc = make_esc(cb, "Installer::_run2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run"
          });
          _this.config.make_tmpdir(esc(__iced_deferrals.defer({
            lineno: 163
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run"
            });
            _this.setup_keyring(esc(__iced_deferrals.defer({
              lineno: 164
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.run"
              });
              _this.setup_key(esc(__iced_deferrals.defer({
                lineno: 165
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run"
                });
                _this.get_index(esc(__iced_deferrals.defer({
                  lineno: 166
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                    funcname: "Installer.run"
                  });
                  _this.upgrade_key(esc(__iced_deferrals.defer({
                    lineno: 167
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                      funcname: "Installer.run"
                    });
                    _this.upgrade_software(esc(__iced_deferrals.defer({
                      lineno: 168
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    log.debug("- Installer::run");
                    return cb(null);
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Installer.prototype.setup_key = function(cb) {
      var err, ks, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ks = new KeySetup(this.config);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.setup_key"
          });
          ks.run(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 176
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.get_index = function(cb) {
      var err, gi, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gi = new GetIndex(this.config);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.get_index"
          });
          gi.run(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 183
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.upgrade_key = function(cb) {
      return cb(null);
    };

    Installer.prototype.upgrade_software = function(cb) {
      return cb(null);
    };

    Installer.prototype.setup_keyring = function(cb) {
      keyring.init({
        log: log,
        get_tmp_keyring_dir: (function(_this) {
          return function() {
            return _this.config.get_tmpdir();
          };
        })(this)
      });
      return cb(null);
    };

    Installer.prototype.run_old = function(cb) {
      var err, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.gpg = new GPG;
      esc = make_esc(cb, "Installer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run_old"
          });
          _this.import_key(esc(__iced_deferrals.defer({
            lineno: 205
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run_old"
            });
            _this.fetch_package(esc(__iced_deferrals.defer({
              lineno: 206
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.run_old"
              });
              _this.fetch_signature(esc(__iced_deferrals.defer({
                lineno: 207
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run_old"
                });
                _this.write_files(esc(__iced_deferrals.defer({
                  lineno: 208
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-installer/src/installer.iced",
                    funcname: "Installer.run_old"
                  });
                  _this.run2(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return err = arguments[0];
                      };
                    })(),
                    lineno: 209
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    return Installer;

  })(BaseCommand);

}).call(this);
