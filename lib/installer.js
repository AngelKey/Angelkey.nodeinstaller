// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var BaseCommand, Installer, assert_exactly_one, constants, fullname, gpg, iced, key, make_esc, request, short_id, url_join, __iced_k, __iced_k_noop, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseCommand = require('./base').BaseCommand;

  _ref = require('gpg-wrapper'), assert_exactly_one = _ref.assert_exactly_one, gpg = _ref.gpg;

  make_esc = require('iced-error').make_esc;

  _ref1 = require('./key'), key = _ref1.key, short_id = _ref1.short_id;

  request = require('request');

  fullname = require('./package').fullname;

  constants = require('./constants').constants;

  url_join = function() {
    var arg, args, parts, _i, _len, _ref2;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    parts = [args[0]];
    _ref2 = args.slice(1);
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      arg = _ref2[_i];
      if (parts.slice(-1)[0].slice(-1)[0] !== '/') {
        parts.push('/');
      }
      parts.push(arg);
    }
    return parts.join('');
  };

  exports.Installer = Installer = (function(_super) {
    __extends(Installer, _super);

    function Installer() {
      return Installer.__super__.constructor.apply(this, arguments);
    }

    Installer.prototype.import_key = function(cb) {
      var args, esc, keybuf, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::import_key");
      keybuf = new Buffer(key, 'utf8');
      args = ["--import"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.import_key"
          });
          gpg({
            args: args,
            stdin: keybuf,
            quiet: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 26
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.import_key"
            });
            assert_exactly_one(short_id, esc(__iced_deferrals.defer({
              lineno: 27
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Installer.prototype.fetch_package = function(cb) {
      var body, err, file, headers, opts, prefix, res, url, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prefix = this.argv.get("url-prefix", "u") || constants.url_prefix;
      file = ((_ref2 = this.argv.get()) != null ? _ref2[0] : void 0) || "latest-stable";
      url = url_join(prefix, file);
      headers = {
        "X-Keybase-Installer": fullname()
      };
      opts = {
        url: url,
        headers: headers
      };
      console.log("Fetching archive: " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.fetch_package"
          });
          request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 39
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            err = new Error("Error in fetch: " + err.message);
          }
          return cb(err);
        };
      })(this));
    };

    Installer.prototype.verify_package = function(cb) {
      return cb(null);
    };

    Installer.prototype.install_package = function(cb) {
      return cb(null);
    };

    Installer.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Installer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/installer.iced",
            funcname: "Installer.run"
          });
          _this.import_key(esc(__iced_deferrals.defer({
            lineno: 58
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/installer.iced",
              funcname: "Installer.run"
            });
            _this.fetch_package(esc(__iced_deferrals.defer({
              lineno: 59
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                funcname: "Installer.run"
              });
              _this.verify_package(esc(__iced_deferrals.defer({
                lineno: 60
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/installer.iced",
                  funcname: "Installer.run"
                });
                _this.install_package(esc(__iced_deferrals.defer({
                  lineno: 61
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return Installer;

  })(BaseCommand);

}).call(this);
