// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var AboutCommand, BaseCommand, Main, find_bin, getopt, gpg, iced, make_esc, package_json, run, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  getopt = require('./getopt').getopt;

  package_json = require('../package.json');

  make_esc = require('iced-error').make_esc;

  gpg = require('gpg-wrapper');

  find_bin = function() {
    var k, v, _ref;
    _ref = package_json.bin;
    for (k in _ref) {
      v = _ref[k];
      return k;
    }
  };

  exports.BaseCommand = BaseCommand = (function() {
    function BaseCommand(argv) {
      this.argv = argv;
    }

    return BaseCommand;

  })();

  AboutCommand = (function(_super) {
    __extends(AboutCommand, _super);

    function AboutCommand() {
      return AboutCommand.__super__.constructor.apply(this, arguments);
    }

    AboutCommand.prototype.run = function(cb) {
      console.log("" + (find_bin()) + " v" + package_json.version);
      return cb(null);
    };

    return AboutCommand;

  })(BaseCommand);

  Main = (function() {
    Main.OPTS = {
      a: {
        alias: 'about',
        action: "storeTrue",
        help: 'display version and command name, then quit'
      }
    };

    function Main() {
      this.cmd = null;
    }

    Main.prototype.parse_args = function(cb) {
      return this.argv = getopt(this.process.argv.slice(2), {
        flags: "hv?",
        opts: ""
      });
    };

    Main.prototype.arg_parse_init = function() {
      this.ap = new ArgumentParser({
        addHelp: true,
        version: package_json.version,
        description: "keybase.io CLI installer/updater",
        prog: find_bin()
      });
      add_option_dict(this.ap, Main.OPTS);
      return null;
    };

    Main.prototype.parse_args = function(cb) {
      var err;
      err = this.arg_parse_init();
      if (err == null) {
        this.argv = this.ap.parse_args(process.argv.slice(2));
        if (this.argv.opts.about) {
          this.cmd = new AboutCommand(this.argv);
        } else {
          err = new Error("unimplemented command");
        }
      }
      return cb(err);
    };

    Main.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/main.iced",
            funcname: "Main.run"
          });
          _this.setup(esc(__iced_deferrals.defer({
            lineno: 74
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/main.iced",
              funcname: "Main.run"
            });
            _this.cmd.run(esc(__iced_deferrals.defer({
              lineno: 75
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Main.prototype.main = function() {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/main.iced",
            funcname: "Main.main"
          });
          _this.run(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 81
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            console.warn(err.message);
          }
          return process.exit(typeof err !== "undefined" && err !== null ? -2 : 0);
        };
      })(this));
    };

    Main.prototype.setup = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "setup");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/main.iced",
            funcname: "Main.setup"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 89
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    return Main;

  })();

  exports.run = run = function() {
    return (new Main).main();
  };

}).call(this);
