// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var Config, constants, fullname, iced, log, request, url_join, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  constants = require('./constants').constants;

  fullname = require('./package').fullname;

  request = require('./request');

  log = require('./log');

  url_join = function() {
    var a, args, parts, rxx, trim;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    rxx = /^(\/*)(.*?)(\/*)$/;
    trim = function(s) {
      var m;
      if ((m = s.match(rxx)) != null) {
        return m[2];
      } else {
        return s;
      }
    };
    parts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        a = args[_i];
        _results.push(trim(a));
      }
      return _results;
    })();
    return parts.join('/');
  };

  exports.Config = Config = (function() {
    function Config(argv) {
      this.argv = argv;
    }

    Config.prototype.url_prefix = function() {
      return this.argv.get("u", "url-prefix") || constants.url_prefix;
    };

    Config.prototype.make_url = function(u) {
      return url_join(this.url_prefix(), u);
    };

    Config.prototype.request = function(u, cb) {
      var body, err, opts, res, url, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      url = this.make_url(u);
      opts = {
        url: url,
        headers: {
          "X-Keybase-Installer": fullname()
        },
        maxRedirects: 10,
        progress: 50000
      };
      log.debug("+ Fetching URL " + url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-installer/src/config.iced",
            funcname: "Config.request"
          });
          request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 39
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- Fetched -> " + (typeof res !== "undefined" && res !== null ? res.statusCode : void 0));
          return cb(err, res, body);
        };
      })(this));
    };

    return Config;

  })();

}).call(this);
