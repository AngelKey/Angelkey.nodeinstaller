// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var constants, iced, keyring, log, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  keyring = require('gpg-wrapper').keyring;

  constants = require('./constants').constants;

  log = require('./log').log;

  exports.SetupKeyRunner = new Class(SetupKeyRunner({
    constructor: function() {
      this.master = keyring.master_ring();
      return this.id_email = "code@keybase.io";
    },
    run: function(cb) {
      var err, key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced"
          });
          _this.find_latest_key(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return key = arguments[1];
              };
            })(),
            lineno: 16
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof key === "undefined" || key === null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/setup_key.iced"
                });
                _this.install_key(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return key = arguments[1];
                    };
                  })(),
                  lineno: 18
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    },
    find_latest_key: function(cb) {
      var c, comments, em, err, esc, m, max, msg, out, query, ret, uid, uids, versions, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SetupKeyRunner::find_latest_key");
      em = constants.uid_email.code;
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced"
          });
          _this.master.read_uids_from_key({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return uids = arguments[0];
              };
            })(),
            lineno: 27
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          comments = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              uid = uids[_i];
              if (uid.email === em) {
                _results.push(uid.comment);
              }
            }
            return _results;
          })();
          versions = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = comments.length; _i < _len; _i++) {
              c = comments[_i];
              if ((m = c.match(/v(\d+)/))) {
                _results.push(parseInt(m[1]));
              }
            }
            return _results;
          })();
          (function(__iced_k) {
            if (versions.length === 0) {
              return __iced_k(log.warn("No code-signing key (" + em + ") in primary GPG keychain"));
            } else {
              max = Math.max.apply(Math, versions);
              query = "(" + max + ") <" + em + ">";
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/setup_key.iced"
                });
                _this.master.find_keys({
                  query: query
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return out = arguments[0];
                    };
                  })(),
                  lineno: 35
                })));
                __iced_deferrals._fulfill();
              })(function() {
                msg = out.length === 0 ? "Didn't find any key for query " + query : out.length > 1 ? "Found too many keys that matched " + query : null;
                return __iced_k(msg != null ? err = new Error(msg) : ret = ids64[0]);
              });
            }
          })(function() {
            return cb(err, ret);
          });
        };
      })(this));
    }
  }));

}).call(this);
