// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var SetupKeyRunner, a_json_parse, athrow, constants, fpeq, iced, key, keyring, log, make_esc, request, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  keyring = require('gpg-wrapper').keyring;

  constants = require('./constants').constants;

  log = require('./log').log;

  make_esc = require('iced-error').make_esc;

  request = require('./request').request;

  key = require('./key');

  fpeq = require('pgp-utils').util.fpeq;

  _ref = require('iced-utils').util, athrow = _ref.athrow, a_json_parse = _ref.a_json_parse;

  exports.SetupKeyRunner = SetupKeyRunner = (function() {
    function SetupKeyRunner(config) {
      this.config = config;
      this.master = keyring.master_ring();
      this._key = null;
    }

    SetupKeyRunner.prototype.key = function() {
      return this._key;
    };

    SetupKeyRunner.prototype.install_key = function(cb) {
      var a, body, err, esc, json, res, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SetupKeyRunner::install_key");
      v = key.version;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
            funcname: "SetupKeyRunner.install_key"
          });
          request(_this.config.make_url("/" + v + "/key.json"), esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                res = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 28
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
              funcname: "SetupKeyRunner.install_key"
            });
            a_json_parse(body, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return json = arguments[0];
                };
              })(),
              lineno: 29
            })));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref1;
            err = (a = typeof json !== "undefined" && json !== null ? json.version : void 0) !== v ? new Error("Version mismatch; expected " + v + " but got " + a) : ((a = typeof json !== "undefined" && json !== null ? (_ref1 = json.code) != null ? _ref1.id160 : void 0 : void 0) == null) || !(fpeq(a, key.code.id160)) ? new Error("Fingerprint mismatch; expected " + a + " but got " + b) : null;
            (function(__iced_k) {
              if (err != null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
                    funcname: "SetupKeyRunner.install_key"
                  });
                  athrow(err, esc(__iced_deferrals.defer({
                    lineno: 38
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    SetupKeyRunner.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SetupKeyRunner::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
            funcname: "SetupKeyRunner.run"
          });
          _this.find_latest_key(esc(__iced_deferrals.defer({
            lineno: 46
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this._key == null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
                  funcname: "SetupKeyRunner.run"
                });
                _this.install_key(esc(__iced_deferrals.defer({
                  lineno: 47
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    SetupKeyRunner.prototype.find_latest_key = function(cb) {
      var c, comments, em, err, esc, m, max, out, query, uid, uids, versions, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SetupKeyRunner::find_latest_key");
      em = constants.uid_email.code;
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
            funcname: "SetupKeyRunner.find_latest_key"
          });
          _this.master.read_uids_from_key({}, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return uids = arguments[0];
              };
            })(),
            lineno: 56
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          comments = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              uid = uids[_i];
              if (uid.email === em) {
                _results.push(uid.comment);
              }
            }
            return _results;
          })();
          versions = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = comments.length; _i < _len; _i++) {
              c = comments[_i];
              if ((m = c.match(/^v(\d+)$/))) {
                _results.push(parseInt(m[1]));
              }
            }
            return _results;
          })();
          (function(__iced_k) {
            if (versions.length === 0) {
              return __iced_k(log.warn("No code-signing key (" + em + ") in primary GPG keychain"));
            } else {
              max = Math.max.apply(Math, versions);
              query = "(v" + max + ") <" + em + ">";
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
                  funcname: "SetupKeyRunner.find_latest_key"
                });
                _this.master.find_keys({
                  query: query
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return out = arguments[0];
                    };
                  })(),
                  lineno: 64
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (out.length === 0) {
                    return __iced_k(err = new Error("Didn't find any key for query " + query));
                  } else {
                    (function(__iced_k) {
                      if (out.length > 1) {
                        return __iced_k(err = new Error("Found too many keys that matched " + query));
                      } else {
                        _this._key = _this.master.make_key({
                          key_id_64: ids64[0],
                          username: em
                        });
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/home/max/src/keybase-node-installer/src/setup_key.iced",
                            funcname: "SetupKeyRunner.find_latest_key"
                          });
                          _this._key.load(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return err = arguments[0];
                              };
                            })(),
                            lineno: 69
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return __iced_k(err ? _this._key = null : void 0);
                        });
                      }
                    })(__iced_k);
                  }
                })(__iced_k);
              });
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    return SetupKeyRunner;

  })();

}).call(this);
