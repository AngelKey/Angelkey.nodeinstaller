// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var constants, createHash, iced, json_stringify_sorted, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  json_stringify_sorted = require('iced-utils').util.json_stringify_sorted;

  createHash = require('crypto').createHash;

  constants = require('./constants').constants;

  exports.hash_json = function(x) {
    var strip;
    strip = function(x) {
      var m;
      if ((m = x.match(/^(\s*)(.*?)(\s*)$/))) {
        return m[2];
      } else {
        return x;
      }
    };
    return createHash('SHA512').update(strip(json_stringify_sorted(x))).digest('hex');
  };

  exports.key_query = function(v, which) {
    return "(v" + v + ") <" + which + "@" + constants.canonical_host + ">";
  };

  exports.clean_ring = function(ring, cb) {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        if (ring != null) {
          log.debug("| Cleaning up one-shot ring");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-installer/src/util.iced",
              funcname: "clean_ring"
            });
            ring.nuke(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 21
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err !== "undefined" && err !== null ? log.warn("Error cleaning up 1-shot ring: " + err.message) : void 0);
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        return cb();
      };
    })(this));
  };

}).call(this);
