// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var check_cmd, exec, fs, iced, log, npm, os, path, prng, run, __iced_k, __iced_k_noop, _config;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  run = require('iced-spawn').run;

  exec = require('child_process').exec;

  path = require('path');

  fs = require('fs');

  log = require('./log');

  prng = require('crypto').prng;

  os = require('os');

  _config = null;

  exports.set_config = function(c) {
    return _config = c;
  };

  exports.npm = npm = function(_arg, cb) {
    var args, err, name, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    args = _arg.args;
    name = _config.get_cmd('npm');
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/chris/git/keybase/node-installer/src/npm.iced"
        });
        run({
          args: args,
          name: name
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 19
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

  exports.check = check_cmd = function(cb) {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/chris/git/keybase/node-installer/src/npm.iced"
        });
        npm({
          args: ["version"]
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 25
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

  exports.test_install = function(cb) {
    var cmd, dirname, err, r, test, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    log.debug("+ Installer::test_npm_install");
    cmd = _config.get_alt_cmd('npm');
    err = null;
    (function(_this) {
      return (function(__iced_k) {
        if (cmd != null) {
          return __iced_k(log.debug("| install check skipped since you're using a custom npm: " + cmd));
        } else {
          dirname = path.dirname(process.execPath);
          r = prng(10).toString('hex');
          test = path.resolve(dirname, ".keybase_test_install_" + r);
          log.debug("| Writing temporary file, to see if install will work: " + test);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/chris/git/keybase/node-installer/src/npm.iced",
              funcname: "test_install"
            });
            fs.writeFile(test, new Buffer([]), {
              mode: 0x180
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 41
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              var _ref;
              if (err != null) {
                return __iced_k((_ref = err.code) === 'EACCES' || _ref === 'EPERM' ? os.platform() === 'win32' ? err = new Error("Permission denied - Node was installed as Admin.\n" + "\nWindows solution: launch another command window by right-clicking" + "\nand selecting \"Run as Administrator\"," + "\nthen run `keybase-installer`. (Then you may close the window.)\n") : err = new Error("Permission denied installing to " + dirname + ": try running `sudo keybase-installer`") : err = new Error("Can't write to directory " + dirname + ": " + err.code));
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/chris/git/keybase/node-installer/src/npm.iced",
                    funcname: "test_install"
                  });
                  fs.unlink(test, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return tmp = arguments[0];
                      };
                    })(),
                    lineno: 54
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(typeof tmp !== "undefined" && tmp !== null ? log.warn("Failed to unlink temporary file: " + test) : log.debug("| Unlinking file: " + test));
                });
              }
            })(__iced_k);
          });
        }
      });
    })(this)((function(_this) {
      return function() {
        log.debug("- Installer::test_npm_install");
        return cb(err);
      };
    })(this));
  };

}).call(this);
