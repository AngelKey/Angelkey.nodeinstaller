// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, Insane, Sane, lst, pathmod, sym, _eng, _i, _len, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pathmod = require('path');

  Base = (function() {
    function Base() {}

    Base.prototype.unsplit = function(v) {
      if (v.length && v[0].length === 0) {
        v = v.slice(0);
        v[0] = pathmod.sep;
      }
      return pathmod.join.apply(pathmod, v);
    };

    Base.prototype.join = function() {
      var v;
      v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return pathmod.join.apply(pathmod, v);
    };

    return Base;

  })();

  Sane = (function(_super) {
    __extends(Sane, _super);

    function Sane() {
      this.sep = pathmod.sep;
    }

    Sane.prototype.split = function(x) {
      return x.split(this.sep);
    };

    Sane.prototype.home = function(opts) {
      var ret;
      if (opts == null) {
        opts = {};
      }
      ret = process.env.HOME;
      if (opts.array) {
        return this.split(ret);
      } else {
        return ret;
      }
    };

    Sane.prototype.normalize = function(p) {
      return p;
    };

    return Sane;

  })(Base);

  lst = function(v) {
    return v.slice(-1)[0];
  };

  Insane = (function(_super) {
    __extends(Insane, _super);

    function Insane() {
      return Insane.__super__.constructor.apply(this, arguments);
    }

    Insane.prototype.split = function(x) {
      return x.split(/[/\\]/);
    };

    Insane.prototype.normalize = function(p) {
      return this.join(this.unsplit(p));
    };

    Insane.prototype.home = function(opts) {
      var e, err, p, ret;
      if (opts == null) {
        opts = {};
      }
      ret = null;
      err = (e = process.env.TEMP) == null ? new Error("No env.TEMP variable found") : (p = this.split(e)).length === 0 ? new Error("Malformed env.TEMP variable") : !(p.pop().match(/^te?mp$/i)) ? new Error("TEMP didn't end in \\Temp") : (lst(p).toLowerCase() === "local" && !opts.local ? (p.pop(), p.push("Roaming")) : void 0, ret = opts.array ? p : this.unsplit(p), null);
      if (err != null) {
        throw err;
      }
      return ret;
    };

    return Insane;

  })(Base);

  _eng = process.platform === 'win32' ? new Insane() : new Sane();

  _ref = ['split', 'unsplit', 'home', 'normalize', 'join'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    sym = _ref[_i];
    exports[sym] = _eng[sym].bind(_eng);
  }

}).call(this);
